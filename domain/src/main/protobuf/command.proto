syntax = "proto2";

package org.sofi.deadman.messages;

import "event.proto";
import "scalapb/scalapb.proto";

// Commands ---------------------------------------------------------------------------------------

message ScheduleTask { option (scalapb.message).extends = "org.sofi.deadman.messages.command.Command";
    required string key = 1;       // Task keys
    required string aggregate = 2; // Aggregate ID (eg application)
    required string entity = 3;    // Entity ID (eg customer)
    required uint64 ttl = 4;       // Task time to live in millis
    repeated uint64 ttw = 5;       // Task time until warning
    repeated string tags = 6;      // Task tags
    optional uint64 ts = 7;        // Start timestamp (if not provided, current timestamp will be used)
}

message CompleteTask { option (scalapb.message).extends = "org.sofi.deadman.messages.command.Command";
    required string key = 1;       // Task key
    required string aggregate = 2; // Aggregate ID (eg application)
    required string entity = 3;    // Entity ID (eg customer)
}

message ExpireTask {
    required Task task = 1;        // The expired task
}

message IssueTaskWarning {
    required Task task = 1;        // The expired task
    required uint64 ttw = 2;       // The expiration duration
}

// Command Response -------------------------------------------------------------------------------

enum ResponseType {
    SUCCESS = 0;
    ERROR = 1;
    QUEUED = 2;
}

message CommandResponse {
    required ResponseType responseType = 1 [default = SUCCESS];
    repeated string errors = 2;
}

// Snapshot ---------------------------------------------------------------------------------------

message SaveState { option (scalapb.message).extends = "org.sofi.deadman.messages.command.Command";
    required string aggregate = 1;          // Aggregate ID (eg application)
}

message TaskState {
    required string id = 1;                 // The task ID
    required ExpireTask expiration = 2;     // The task expiration command for the given ID
    repeated IssueTaskWarning warnings = 3; // The task warning commands for the given ID
}

message TaskSnapshot {
    repeated TaskState state = 1;           // Task actor state
}
